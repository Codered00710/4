Working with Circle CI for continuous integration :
Step 1 - Create a repository
1.	Log in to GitHub and begin the process to create a new repository.
2.	Enter a name for your repository (for example, hello-world).
3.	Select the option to initialize the repository with a README file.
4.	Finally, click Create repository.
5.	There is no need to add any source code for now
6.	Login to Circle CI https://app.circleci.com/ Using GitHub Login, Once logged in navigate to Projects.

Step 2 - Set up CircleCI
a)	Navigate to the CircleCI Projects page. If you created your new repository under an -organization, you will need to select the organization name.
b)	On the Projects dashboard, select the project you want to set up (hello-world).
c)	Select the option to commit a starter CI pipeline to a new branch and click Set Up Project (This will create a file .circleci/config.yml at the root of your repository on a new branch called circleci-project-setup) 

Step 3 - Your first pipeline
a)	On the project’s pipeline page, click the green Success button, which brings you to the workflow that ran (say-hello workflow).

b)	Within this workflow, the pipeline ran one job, called say-hello. 

c)	Click “say-hello” Job with a green tick.to see the steps in this job:
•	Spin up environment.
•	Preparing environment variables
•	Checkout code
•	Say hello.
d)	Navigate to Github and select Branch and option circleci-project-setup
Step 4 - Break your build 
a)	In this section, you will edit the .circleci/config.yml file and see what happens if a build does not complete successfully. 
b)	Open .circleci folder.
c)	Open config.yml file
d)	Click on pencil icon to edit the file.
e)	Modify the file with the below code:
Code:
f)	Scroll down and Commit your changes on GitHub

g)	After committing your changes, then return to the Projects page in CircleCI. You should see a new pipeline running(hello-world2)… and it will fail! 

Step 5 – Use Workflows 
You do not have to use orbs to use CircleCI. The following example details how to create a custom configuration that also uses the workflow feature of CircleCI. 
a)	Edit .circleci/config.yml file and copy and paste the following text into it.

***********************************************************************************************
code-->

# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2
jobs:
  one:
    docker:
      - image: cimg/ruby:2.6.8
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout 
      - run: echo "A first hello"
      - run: sleep 25
  two:
     docker:
       - image: cimg/ruby:3.0.2
         auth:
           username: mydockerhub-user
           password:   $DOCKERHUB_PASSWORD
     steps:
       - checkout
       - run: echo "A more familiar hi"
       - run: sleep 15
workflows:
  version: 2
  one_and_two:
    jobs:
      - one
      - two

-->navigate back to the CircleCI Pipelines page. You should see your(hello-world5) pipeline running.

a)	Try updating config.yml with the following code:
Code:
version: 2
jobs:
  one:
    docker:
      - image: cimg/ruby:2.6.8
        auth:
          username: addyboy07
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run: echo "A first hello"
      - run: mkdir -p my_workspace
      - run: echo "Trying out workspace" > my_workspace/echo-output
      - persist_to_workspace:
          root: my_workspace
          paths:
            - echo-output
  two:
    docker:
      - image: cimg/ruby:2.6.8
        auth:
          username: addyboy07
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:  echo "A more familiar hi"
      - attach_workspace:
          at: my_workspace
      - run:
          if [ $(cat my_workspace/echo-output) == "Trying out workspace" ]; then
            echo "It Worked!";
          else
            echo "Nope!";
          fi

workflows:
  version: 2
  one_and_two:
    jobs:
      - one
      - two:
          requires:
            - one


